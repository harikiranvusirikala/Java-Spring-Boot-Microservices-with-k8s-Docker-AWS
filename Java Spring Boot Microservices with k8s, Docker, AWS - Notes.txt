Section 1 - INTRODUCTION TO SPRING BOOT AND BASICS OF API:
• Basics of API
• Status Codes in API
• Types of API requests
• What is a Web Framework?
• Introduction to Spring Framework
• What is Spring Boot?
• Spring Boot Architecture


Basics of API:
---
API - Application Programming Interface
Set or rules and protocols - to communicate between software applications

APIs needed for:
• Share data
• Speed up development
• Extend the reach and functionality of software

Types of API:
Internal API's - in company
External API's - public, like google/twitter/facebook
Partner API's - from company partnered with


Status Codes in API:
---
Classification of Status Code:
1xx informational
2xx successful
3xx redirection
4xx client error
5xx server error

Common Status Codes:
200 Success
201 Created
204 No Content
301 Moved Permanently
400 Bad request
401 Unauthorized
403 Forbidden
404 Not Found
500 Internal Server Error


Types of API requests:
---
GET Request - Get conent, only read, 200 ok 404 not found
POST Request - create content, 201 created 404 not found 400 bad request
PUT Request - update existing content, 200 ok 404 not found 400 bad request
DELETE Request - only delete, 200 ok 404 not found 400 bad request


What is Web Framework?:
---
Website have a lot in common like Security, Databases, URLs, Authentications, etc.
Should we do every thing from scratch?

Web Framework is nothing but collection of tools and modules that is needed to do standard tasks  across every web application.

Popular Web Frameworks:
• Spring Boot(Java)
• Django (Python)
• Flask (Python) - Lightweight flexible, for small projects where we need more control over the code
• Express (JavaScript) - part of MEAN or MERN stack, widely used for building APIs
• Ruby on Rails (Ruby) - known for philosophy of convention over configuration, helps increase productivity once we understands it's conventions.


Introduction to Spring Framework
---
Features of Spring Framework:
• Inversion of Control (IoC) 
- Reduces dependency and increases flexibility for developers.
- Spring framework manages the life cycle of the objects(called as beans here).
- Spring does this with feature of Dependency Injection which allows it to define the dependency of the class externally and it provides them to the class whenever the class needs it during the  runtime.

MessageService is a interface.
Before:
public SMSClient() {
  this.messageService = new EmailService();
}

After:
public SMSClient(MessageService messageService) {
  this.messageService = messageService;
}

• Data Access
- Has things like jdbc, hybernate, jpa - work with databases in easy way

• MVC Framework (Model View Controller Framework)
- Provides clear separation between model code and web form.

• Transaction Management
- Unified way to manage transactions across objects.

• Security
- Has aspect of security, Spring Security module provides features like authentication, protect from common site vulnerabilities, define authorization in application.

• Testing Support
- good framework for unit testing and integration purposes
- features like Spring Test Context framework
- good integration with frameworks like Junit, mokito, etc to write test cases and mocking, etc

• Internationalization(i18n) and Localization(l10n)
- build applications that can easily be adopted to different kinds of languages and locals.

History - Rod Johnson started in 2002 with the goal to have lightweight approach to simplify Java Enterprise Edition (JEE).


What is Spring Boot?
---
Open-source, Java-based framework used to create stand-alone, production-grade Spring-based Applications.

Offers a set of pre-configured components or defaults, and eliminating the need for a lot of boilerplate code that was involved in setting up a Spring application.

Spring Boot = Spring Framework + Prebuilt Configuration + Embedded Servers

Components of Spring Boot:
• Spring Boot Starters - Set of convinent dependencies.
• Auto Configuraiton - automatically configures the application, like if using database given database username and password in properties it will automatically configures the app to interact with database.
• Spring Boot Actuator - monitoring your application, metric gathering, tracing our HTTP request, ...
• Embedded Server - like Apache, Tomcat, Jetty. Allows to run application as a executable Standalone Jar file.
• Spring Boot DevTools - enhance the productivity during the application development. Like automatic application restart or redployment, better/enhanced logging for faster development.

Advantages of Spring Boot:
• Standalone and Quick Start - Just run by jar, no need to starting server
• Starter code
• Less Configuration
• Reduced cost and application development time

Why do developers love Spring Boot?
→ Java based
→ Fast, easy
→ Comes with embedded server
→ Various plugins
→ Avoids boilerplate code and configurations


Spring Boot Architecture
---
Following are the different tiers
→ Presentation layer
→ Service layer
→ Data access layer

Presentation Layer:
Presentation layer presents the data and the application features to the user. This is the layer where in all the controller classes exist.

Service Layer:
Service layer is where business logic resides in the application. Tasks such as evaluations, decision making, processing of data is done at this layer.

Data Access Layer:
Data access layer is the layer where all the repository classes reside.



Section 2 - Spring Boot 101: Building Our First REST API

spring initializr - start.spring.io

Spring Boot version with "(SNAPSHOT)" are no recommended for production as they are pre release versions.


Dependency:
Makes things easy instead of reinventing the wheel.

Need to go through following maven central repository for the once spring initializr doesn't, as it show only mostly used.
search.maven.org / central.sonatype.com / mvnrepository.com

spring initializer only shows stable versions.


Creating Hello World API:
@RestController is mainly combination of @Controller and @ResponseBody. Used when having a mapping.


Spring Boot Auto Configuration:
The tomcat was ran automatically when we start the Spring Boot application, it is done by Auto Configuration.

@RestController annotation means it is a Controller and it should handle HTTP requests.
Therefore it creats a bean for this class, an object managed Spring, in the application context and it is mapped to the controller.
We just need to specify @RestController annotation and Spring Boot handles it.
 
Spring Boot has default Error page preconfigured for us, when unknown URI being requested.
This is also done by Spring Boot Auto Configuration.


